namespace BlazeUI.Blaze;

public static class Weights
{
    // files and ranks are reversed, files go from a to h on the y-axis
    public const float MaterialMultiplier = 1.5f;
    public const int CastlingBonus = 30;
    public const int NoCastlingPenalty = -15;
    public const float MobilityMultiplier = 1f;
    public const int ProtectedPawnBonus = 2;
    public const int IsolatedPawnPenalty = -2;
    public const int OpenFileAdvantage = 20;
    public const int SemiOpenFileAdvantage = 10;
    public const int PriorityWeightMultiplier = 15;
    
    public static readonly int[,,] Pieces = new[,,]
    {
        { // white pawn
            {0,25,15,10,30,40,100,0},
            {0,35,10,10,30,40,100,0},
            {0,35,10,10,30,40,100,0},
            {0,0,30,50,55,55,100,0},
            {0,0,30,50,55,55,100,0},
            {0,35,10,10,30,40,100,0},
            {0,35,10,10,30,40,100,0},
            {0,25,10,10,30,40,100,0},
        },
        { // white rook
            {0,5,5,5,5,5,55,30},
            {15,10,10,10,10,10,55,30},
            {30,10,10,10,10,10,55,30},
            {30,10,10,10,10,10,55,30},
            {30,10,10,10,10,10,55,30},
            {30,10,10,10,10,10,55,30},
            {30,10,10,10,10,10,55,30},
            {0,5,5,5,5,5,55,30},
        },
        { // white knight
            {-10,0,15,10,10,15,5,-5},
            {-20,10,30,20,20,20,10,0},
            {5,15,40,25,20,25,20,0},
            {0,30,35,40,25,30,10,10},
            {0,30,35,40,25,30,10,10},
            {5,15,40,25,20,25,20,0},
            {-20,10,30,20,20,20,10,0},
            {-10,0,15,10,10,15,5,-5},
        },
        { // white bishop
            {10,25,20,25,20,15,15,20},
            {-5,35,30,15,40,10,20,-5},
            {-20,15,25,45,20,20,10,-5},
            {-5,30,15,15,20,10,10,0},
            {-5,30,15,15,20,10,10,0},
            {-20,15,25,45,20,20,10,-5},
            {-5,35,30,15,40,10,20,-5},
            {10,25,20,25,20,15,15,20},
        },
        { // white queen
            {-10,10,20,20,20,30,10,-10},
            {0,15,20,10,10,5,15,0},
            {5,20,25,25,25,10,5,0},
            {-10,20,20,30,30,20,0,0},
            {-10,20,20,30,30,20,0,0},
            {5,20,25,25,25,10,5,0},
            {0,15,20,10,10,5,15,0},
            {-10,10,20,20,20,30,10,-10},
        },
        { // white king - 5
            {90,20,10,0,-10,-20,-30,-50},
            {100,15,10,15,-5,-15,-25,-35},
            {40,25,20,20,10,0,-15,-30},
            {40,30,25,20,15,5,-15,-30},
            {50,30,25,20,15,5,-15,-30},
            {40,25,20,20,10,0,-15,-30},
            {100,15,10,15,-5,-15,-25,-35},
            {90,20,10,0,-10,-20,-30,-50},
        }
    };
        public static readonly int[,,] EndgamePieces = new[,,]
    {
        { // white pawn
            {0,5,5,10,20,50,110,0},
            {0,5,5,10,20,50,110,0},
            {0,5,5,10,20,50,110,0},
            {0,5,5,10,20,50,110,0},
            {0,5,5,10,20,50,110,0},
            {0,5,5,10,20,50,110,0},
            {0,5,5,10,20,50,110,0},
            {0,5,5,10,20,50,110,0},
        },
        { // white rook
            {25,5,5,5,5,5,35,50},
            {20,10,10,10,10,10,35,50},
            {20,10,10,10,10,10,35,50},
            {20,10,10,10,10,10,35,50},
            {20,10,10,10,10,10,35,50},
            {20,10,10,10,10,10,35,50},
            {20,10,10,10,10,10,35,50},
            {25,5,5,5,5,5,35,50},
        },
        { // white knight
            {-15,-5,5,15,15,5,-5,-15},
            {-5,5,15,20,20,15,5,-5},
            {5,15,20,35,35,20,15,5},
            {15,20,35,40,40,35,20,15},
            {15,20,35,40,40,35,20,15},
            {5,15,20,35,35,20,15,5},
            {-5,5,15,20,20,15,5,-5},
            {-15,-5,5,15,15,5,-5,-15},
        },
        { // white bishop
            {-15,-5,5,15,15,5,-5,-15},
            {-5,5,15,20,20,15,5,-5},
            {5,15,20,35,35,20,15,5},
            {15,20,35,40,40,35,20,15},
            {15,20,35,40,40,35,20,15},
            {5,15,20,35,35,20,15,5},
            {-5,5,15,20,20,15,5,-5},
            {-15,-5,5,15,15,5,-5,-15},
        },
        { // white queen
            {-15,-5,5,15,15,5,-5,-15},
            {-5,5,15,20,20,15,5,-5},
            {5,15,20,35,35,20,15,5},
            {15,20,35,40,40,35,20,15},
            {15,20,35,40,40,35,20,15},
            {5,15,20,35,35,20,15,5},
            {-5,5,15,20,20,15,5,-5},
            {-15,-5,5,15,15,5,-5,-15},
        },
        { // white king - 5
            {-15,-5,5,15,15,5,-5,-15},
            {-5,5,15,20,20,15,5,-5},
            {5,15,20,35,35,20,15,5},
            {15,20,35,40,40,35,20,15},
            {15,20,35,40,40,35,20,15},
            {5,15,20,35,35,20,15,5},
            {-5,5,15,20,20,15,5,-5},
            {-15,-5,5,15,15,5,-5,-15},
        }
    };

    public static readonly float[] PiecewiseMaterialWeights = [0.6f, 1.4f, 1.5f, 1.4f, 1.5f, 1.5f];

    public static readonly int[] WhitePassedPawnBonuses = [0,10,11,20,50,700,100,0];
    public static readonly int[] BlackPassedPawnBonuses = [0,-100,-70,-50,-20,-11,-10,0];
    public static readonly int[] EndgameWhitePassedPawnBonuses = [0,30,40,50,80,100,150,0];
    public static readonly int[] EndgameBlackPassedPawnBonuses = [0,-150,-100,-80,-50,-40,-30,0];
    public static readonly int[] DoublePawnPenalties = [0, 0, -15, -30, -30, -30, -30];
    public static readonly int[] KingSafetyBonuses = [10,30,30,20,10,0,-20,-20,-20];
}